# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on: [pull_request, push]

jobs:
  build:
    strategy:
      matrix:
        # Use these Java versions
        java: [
          17,    # Current Java LTS & minimum supported by Minecraft
        ]
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    permissions:
        contents: write
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: setup jdk ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'microsoft'
      - name: make gradle wrapper executable
        if: ${{ runner.os != 'Windows' }}
        run: chmod +x ./gradlew
      - name: build
        run: ./gradlew build
      - name: capture build artifacts
        if: ${{ runner.os == 'Linux' && matrix.java == '17' }} # Only upload artifacts built from latest java on one OS
        uses: actions/upload-artifact@v3
        with:
          name: Artifacts
          path: build/libs/
  deploy:
    runs-on: ubuntu-22.04
    environment: PHRED Minecraft Server
    needs: build
    #Only deploy tagged versions
    if: github.event_name == 'push' && contains(github.event.ref, '/tags/')
    steps:    
      - name: checkout repository
        uses: actions/checkout@v3
      - name: download jar
        uses: actions/download-artifact@v3
        with:
          name: Artifacts
          path: distfiles
      - name: copy file to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: distfiles/*,server-files/*
          target: /tmp/minecraft
      - name: publish build artifacts
        uses: Kir-Antipov/mc-publish@v3.3
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            files: distfiles/*.jar
      - name: setup ssh
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host phred
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.USERNAME }}
          SSH_KEY: ${{ secrets.KEY }}
          SSH_HOST: ${{ secrets.HOST }}
      - name: trigger server deployment script
        run: ssh phred 'chmod a+x /tmp/minecraft/server-files/minecraft-server-deploy.sh && /tmp/minecraft/server-files/minecraft-server-deploy.sh'
